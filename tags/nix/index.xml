<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nix on The Tymscar Blog</title><link>/tags/nix/</link><description>Recent content in Nix on The Tymscar Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 May 2025 16:50:41 +0000</lastBuildDate><atom:link href="/tags/nix/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Nix to build JS/TS projects with private dependencies</title><link>/posts/nixprivatenpmrepos/</link><pubDate>Fri, 02 May 2025 16:50:41 +0000</pubDate><guid>/posts/nixprivatenpmrepos/</guid><description>&lt;p>&lt;img src="/nix-private-npm-repos/githubActioonsSuccess.png" alt="“Running code from a private repo”)">&lt;/p>
&lt;p>Nix is a great tool for building software, especially in professional settings because of the guarantees it comes with.&lt;br>
For example, you can be sure that the software you build is reproducible and that it will work on any machine.&lt;/p>
&lt;p>When it comes to building packages in the Nix world, you usually end up going with derivation builders already made for you.&lt;/p>
&lt;p>For Rust there is &lt;code>rustPlatform.buildRustPackage&lt;/code>, for Go there is &lt;code>go2nix&lt;/code>, for JS/TS there is &lt;code>node2nix&lt;/code>, and so on.&lt;/p></description><content>&lt;p>&lt;img src="/nix-private-npm-repos/githubActioonsSuccess.png" alt="“Running code from a private repo”)">&lt;/p>
&lt;p>Nix is a great tool for building software, especially in professional settings because of the guarantees it comes with.&lt;br>
For example, you can be sure that the software you build is reproducible and that it will work on any machine.&lt;/p>
&lt;p>When it comes to building packages in the Nix world, you usually end up going with derivation builders already made for you.&lt;/p>
&lt;p>For Rust there is &lt;code>rustPlatform.buildRustPackage&lt;/code>, for Go there is &lt;code>go2nix&lt;/code>, for JS/TS there is &lt;code>node2nix&lt;/code>, and so on.&lt;/p>
&lt;h2 id="so-what-is-the-problem-just-use-node2nix">So what is the problem? Just use &lt;code>node2nix&lt;/code>!&lt;/h2>
&lt;p>Well, I wish it were that easy. The problem arises when you try to use private dependencies in your project, and this is not a niche issue at all.&lt;/p>
&lt;p>In fact, if the project your company works on is not fully open-source, you are most likely using private dependencies too.&lt;/p>
&lt;p>What makes that a problem is that for &lt;code>node2nix&lt;/code> to be able to build your project &lt;em>and&lt;/em> be pure, it needs to download the dependencies at build-time, store them in the Nix store, and make them available to the build process.&lt;br>
So at first I thought all I had to do was provide my secret token to &lt;code>node2nix&lt;/code> and it would be able to download the dependencies.&lt;/p>
&lt;p>But how do you do that? One way would be to set an environment variable with the token in it and then use that in your &lt;code>package.json&lt;/code> file.&lt;br>
That would be &lt;em>impure&lt;/em>, because the build process would depend on the environment variable being set.&lt;/p>
&lt;p>Another way—the one I ended up going with—was to use a &lt;code>.yarnrc.yml&lt;/code> file and set the token there. For testing I hosted a &lt;a href="https://verdaccio.org/">Verdaccio&lt;/a> instance in my homelab, created a user, created a private package, and populated my &lt;code>.yarnrc.yml&lt;/code> file like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">nodeLinker&lt;/span>: &lt;span style="color:#ae81ff">node-modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">npmScopes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selfhosted&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">npmAlwaysAuth&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">npmAuthIdent&lt;/span>: &lt;span style="color:#ae81ff">tymscar:ultraSecretPassword&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">npmRegistryServer&lt;/span>: &lt;span style="color:#ae81ff">https://verdaccio.tymscar.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Don&amp;rsquo;t worry. The server has been taken down after the CI went green in the demo repository!&lt;/p>
&lt;p>Now whenever I ran &lt;code>yarn install&lt;/code> it correctly downloaded my private package from the registry, defined in my &lt;code>package.json&lt;/code> file like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;supernixtest&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.0.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;index.js&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;license&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;module&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@selfhosted/tymscartest1&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.1.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the &lt;code>@selfhosted&lt;/code> scope. This is the same one defined in my &lt;code>.yarnrc.yml&lt;/code> file.&lt;/p>
&lt;h2 id="cool-does-it-work-in-nix-now">Cool! Does it work in Nix now?&lt;/h2>
&lt;p>Well, it does if I commit this file to my repo, yes, but that would mean my public repo will contain my private registry token.&lt;/p>
&lt;p>I remembered that &lt;a href="https://github.com/Jadarma/advent-of-code-kotlin-solutions/">a friend of mine&lt;/a> used &lt;strong>git-crypt&lt;/strong> to encrypt his Advent of Code input files, so I gave that a go and it worked. I installed git-crypt and added this to my &lt;code>.gitattributes&lt;/code> file:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitattributes" data-lang="gitattributes">.yarnrc.yml filter=git-crypt diff=git-crypt
&lt;/code>&lt;/pre>&lt;h3 id="cicd-workflow">CI/CD workflow&lt;/h3>
&lt;p>&lt;img src="/nix-private-npm-repos/githubActions.png" alt="Github Actions">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CI Pipeline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Unlock secrets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">sliteteam/github-action-git-crypt-unlock@1.2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GIT_CRYPT_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GIT_CRYPT_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">cachix/install-nix-action@v31&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github_access_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run nix build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">nix build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Show tree structure of result directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;Tree structure of result directory:&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> tree result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run the main file (prints a message from the private repo)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;Running the main file...&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> nix run nixpkgs#nodejs -- result/index.js&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I know, it looks a bit daunting if you&amp;rsquo;ve never done something like this, but in all honesty it&amp;rsquo;s not too bad.&lt;br>
Basically it downloads the repo, unlocks the secrets, installs Nix, builds the project, and runs it.&lt;br>
To decrypt the secrets I just had to add &lt;code>GIT_CRYPT_KEY&lt;/code> to my GitHub repository secrets.&lt;/p>
&lt;h2 id="so-what-is-the-secret-why-did-this-take-me-so-long-to-figure-out">So what is the secret? Why did this take me so long to figure out?&lt;/h2>
&lt;p>In Nix there are two main kinds of derivations: the normal ones you use every day, and &lt;strong>FODs&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>FOD&lt;/strong> stands for &lt;em>Fixed-Output Derivation&lt;/em>, and what makes them special is that they, unlike normal derivations, &lt;em>have network access&lt;/em>. They can download files for you (such as private and public dependencies) and then store them in the Nix store, to be used by your normal derivations.&lt;/p>
&lt;p>Does that mean FODs are not pure? No, actually they are. The only difference—and the way you define FODs—is by adding&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>outputHash &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_HASH_HERE&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to any derivation. That means you &lt;em>know&lt;/em> what the output of the derivation will be, and you can verify that the output is correct.&lt;/p>
&lt;p>So the way to solve the whole issue is by using two derivations:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>One FOD&lt;/strong> that has network access, fetches your dependencies, and stores them in the Nix store.&lt;/li>
&lt;li>&lt;strong>One normal derivation&lt;/strong> that has access to those stored dependencies and builds your project.&lt;/li>
&lt;/ol>
&lt;h3 id="flakenix">&lt;code>flake.nix&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Node.js project with private npm registry support&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flake-parts&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:hercules-ci/flake-parts&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:NixOS/nixpkgs/nixos-24.11&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputs &lt;span style="color:#f92672">=&lt;/span> { flake-parts&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">...&lt;/span> } &lt;span style="color:#f92672">@&lt;/span> inputs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flake-parts&lt;span style="color:#f92672">.&lt;/span>lib&lt;span style="color:#f92672">.&lt;/span>mkFlake { &lt;span style="color:#66d9ef">inherit&lt;/span> inputs; } {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> systems &lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;aarch64-darwin&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;x86_64-linux&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> perSystem &lt;span style="color:#f92672">=&lt;/span> { pkgs&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">...&lt;/span> }: &lt;span style="color:#66d9ef">let&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeEnv &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> export HOME=&amp;#34;$NIX_BUILD_TOP&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> export YARN_ENABLE_TELEMETRY=0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn config set enableGlobalCache false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> supportedArchitecturesJSON &lt;span style="color:#f92672">=&lt;/span> builtins&lt;span style="color:#f92672">.&lt;/span>toJSON {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> os &lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;darwin&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu &lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;arm&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;arm64&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ia32&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;x64&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc &lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;glibc&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;musl&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 1. FOD: fetch dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yarnOfflineCache &lt;span style="color:#f92672">=&lt;/span> pkgs&lt;span style="color:#f92672">.&lt;/span>stdenvNoCC&lt;span style="color:#f92672">.&lt;/span>mkDerivation {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;super-nix-test-deps&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">./.&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nativeBuildInputs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [ yarn-berry ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NODE_EXTRA_CA_CERTS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs&lt;span style="color:#f92672">.&lt;/span>cacert&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/etc/ssl/certs/ca-bundle.crt&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configurePhase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook preConfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>nodeEnv&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn config set cacheFolder $out
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn config set supportedArchitectures --json &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>supportedArchitecturesJSON&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook postConfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildPhase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook preBuild
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn install --immutable --mode skip-build
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook postBuild
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dontInstall &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputHashAlgo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sha256&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputHashMode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;recursive&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputHash &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sha256-WLURUf/xCDOEPOs5jKPAhYfv7Qvy+yxNMMLsq6lLCEQ=&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">in&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 2. Normal derivation: build the project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> packages&lt;span style="color:#f92672">.&lt;/span>default &lt;span style="color:#f92672">=&lt;/span> pkgs&lt;span style="color:#f92672">.&lt;/span>stdenv&lt;span style="color:#f92672">.&lt;/span>mkDerivation {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pname &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;yarn-nix-private-repo-test&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;0.0.1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">./.&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nativeBuildInputs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [ nodejs yarn-berry ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configurePhase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook preConfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>nodeEnv&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn config set cacheFolder &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>yarnOfflineCache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook postConfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildPhase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook preBuild
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> yarn install --immutable --immutable-cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> runHook postBuild
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> installPhase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> mkdir -p $out
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> cp -r . $out/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, it&amp;rsquo;s quite long and seems daunting, but the main bits you need to understand are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>yarnOfflineCache&lt;/code>&lt;/strong> is the FOD that fetches the dependencies and stores them in the Nix store.&lt;/li>
&lt;li>&lt;strong>&lt;code>packages.default&lt;/code>&lt;/strong> is the derivation that builds your project. It uses the cache via&lt;br>
&lt;code>yarn config set cacheFolder ${yarnOfflineCache}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="ok-so-what-do-i-need-to-do-now-if-i-want-to-update-my-dependencies">Ok, so what do I need to do now if I want to update my dependencies?&lt;/h2>
&lt;p>Quite simple, actually:&lt;/p>
&lt;ol>
&lt;li>Work on the project as normal and run &lt;code>yarn install&lt;/code> to update &lt;code>yarn.lock&lt;/code>.&lt;/li>
&lt;li>Delete the value of &lt;code>outputHash&lt;/code> in the &lt;code>yarnOfflineCache&lt;/code> derivation.&lt;/li>
&lt;li>Run &lt;code>nix build&lt;/code>. Nix will tell you the new hash—copy it back into &lt;code>outputHash&lt;/code>.&lt;/li>
&lt;li>Commit the changes. Your colleagues and CI can now run &lt;code>nix build&lt;/code> without issues!&lt;/li>
&lt;/ol>
&lt;p>If you want to see the whole project on GitHub, so it&amp;rsquo;s easier to copy-paste, you can find it &lt;a href="https://github.com/tymscar/Nix-Yarn-Private-Repo-Example">here&lt;/a>.&lt;/p>
&lt;p>Special thanks to &lt;a href="https://github.com/TeamWolfyta">Kieran&lt;/a> for spending a couple of hours with me on a Discord call trying to figure this out. Sorry it took this long to post the solution—it’s been weeks, but the part we were missing was the FOD with the output hash.&lt;/p></content></item><item><title>Running Jetbrains remote dev servers on NixOS</title><link>/posts/jetbrainsremotedevservernixos/</link><pubDate>Mon, 10 Jul 2023 00:33:45 +0100</pubDate><guid>/posts/jetbrainsremotedevservernixos/</guid><description>&lt;p>&lt;img src="/jb-nix-remote-server/project.png" alt="A remote project">&lt;/p>
&lt;p>EDIT: I have raised &lt;a href="https://github.com/NixOS/nixpkgs/pull/243533">a PR to fix this&lt;/a> upstream and got it merged, so you don&amp;rsquo;t have to follow the guide anymore, you can just use the package on nixpkgs unstable for the time being and later on in the future, a stable branch.&lt;/p>
&lt;p>For the past year or so I have been very interested in &lt;a href="https://nixos.org/">NixOS and Nix&lt;/a> in general.
I have set it up as my &lt;a href="https://github.com/tymscar/dotfiles">main OS on my desktop&lt;/a>, I have used it on remote VPS instances, and I have used it for local projects as well in the shape of nix environments.&lt;/p></description><content>&lt;p>&lt;img src="/jb-nix-remote-server/project.png" alt="A remote project">&lt;/p>
&lt;p>EDIT: I have raised &lt;a href="https://github.com/NixOS/nixpkgs/pull/243533">a PR to fix this&lt;/a> upstream and got it merged, so you don&amp;rsquo;t have to follow the guide anymore, you can just use the package on nixpkgs unstable for the time being and later on in the future, a stable branch.&lt;/p>
&lt;p>For the past year or so I have been very interested in &lt;a href="https://nixos.org/">NixOS and Nix&lt;/a> in general.
I have set it up as my &lt;a href="https://github.com/tymscar/dotfiles">main OS on my desktop&lt;/a>, I have used it on remote VPS instances, and I have used it for local projects as well in the shape of nix environments.&lt;/p>
&lt;p>However there has always been an issue, and that is hosting a remote Jetbrains instance on it that I can then connect to from anywhere else.&lt;/p>
&lt;p>Long story short, the way it works is when a client tries to connect to the server, it checks to see if there is any instance of a Jetbrains IDE running.
If there is none, it tries to start one. All good up to this point, however, here is where the problems start: If there is no IDE present, or if it can&amp;rsquo;t detect it, it sends over a package and it tries installing that, and because NixOS is not your standard Linux distro, it fails every time.&lt;/p>
&lt;p>I have looked far and wide online and there hasn&amp;rsquo;t been a good solution until I found this issue on GitHub: &lt;a href="https://github.com/NixOS/nixpkgs/issues/153335">https://github.com/NixOS/nixpkgs/issues/153335&lt;/a>&lt;/p>
&lt;p>None of the solutions there were made specifically for Webstorm, which is what I needed, but the one by &lt;a href="https://github.com/NixOS/nixpkgs/issues/153335#issuecomment-1465833977">Nicolas Guilloux&lt;/a>, for PHPStorm, was something that in the end managed to work.&lt;/p>
&lt;p>I have then spent a handful of hours trying to understand how does the patch work and why is it needed because I wanted to see if I can simplify it to make it less likey to break in future updates.&lt;/p>
&lt;p>I managed to boil it down to 2 modification, and looking back through the history as far as I had patience for, this new patch seems to work with all of the previous versions, which gives me hope that it will continue to work in the future.&lt;/p>
&lt;p>Here is my modified patch, if you want to follow along, save this as &lt;code>JetbrainsRemoteDev.patch&lt;/code> in the same folder as your nix config:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- a/plugins/remote-dev-server/bin/launcher.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/plugins/remote-dev-server/bin/launcher.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -327,6 +327,8 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> REMOTE_DEV_SERVER_USE_SELF_CONTAINED_LIBS=1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+REMOTE_DEV_SERVER_USE_SELF_CONTAINED_LIBS=0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> if [ $REMOTE_DEV_SERVER_USE_SELF_CONTAINED_LIBS -eq 1 ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELFCONTAINED_LIBS=&amp;#34;$REMOTE_DEV_SERVER_DIR/selfcontained/lib&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if [ ! -d &amp;#34;$SELFCONTAINED_LIBS&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">@@ -568,3 +570,5 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &amp;#34;$LAUNCHER&amp;#34; &amp;#34;$STARTER_COMMAND&amp;#34; &amp;#34;$PROJECT_PATH&amp;#34; &amp;#34;$@&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> esac
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+unset REMOTE_DEV_SERVER_USE_SELF_CONTAINED_LIBS
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>I have spent a few hours trying to see if I can get it to work without the patch at all by setting the command line option myself before running the server, or doing it in the overlay, but it would fail either because the variable would be set to 1 and it wouldn&amp;rsquo;t find the libraries (in the store) or because the variable was 0 and at the end of the launch script it would still be set and used by the IDE later down the line.&lt;/p>
&lt;p>I have also made a few modifications to the overlay which would give you the opportunity of selecting multiple Jetbrains IDEs that you would want to use as remote servers. It worked with all of the ones I have tried.&lt;/p>
&lt;p>If you&amp;rsquo;re following at home, you just have to add the overlay to your config, for example as such:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>nixpkgs&lt;span style="color:#f92672">.&lt;/span>overlays &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">final&lt;/span>: &lt;span style="color:#e6db74">prev&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> let
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toolNames &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;phpstorm&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;webstorm&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> makeToolOverlay &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">toolName&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>{toolName} &lt;span style="color:#f92672">=&lt;/span> prev&lt;span style="color:#f92672">.&lt;/span>jetbrains&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>{toolName}&lt;span style="color:#f92672">.&lt;/span>overrideAttrs (&lt;span style="color:#e6db74">old&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patches &lt;span style="color:#f92672">=&lt;/span> (old&lt;span style="color:#f92672">.&lt;/span>patches &lt;span style="color:#f92672">or&lt;/span> []) &lt;span style="color:#f92672">++&lt;/span> [ &lt;span style="color:#f92672">./&lt;/span>&lt;span style="color:#a6e22e">JetbrainsRemoteDev&lt;/span>&lt;span style="color:#f92672">.&lt;/span>patch ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> installPhase &lt;span style="color:#f92672">=&lt;/span> (old&lt;span style="color:#f92672">.&lt;/span>installPhase &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> makeWrapper &lt;span style="color:#e6db74">&amp;#34;$out/$pname/bin/remote-dev-server.sh&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;$out/bin/$pname-remote-dev-server&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>prefix &lt;span style="color:#a6e22e">PATH&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;$out/libexec/$pname:${final.lib.makeBinPath [ final.jdk final.coreutils final.gnugrep final.which final.git ]}&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>prefix &lt;span style="color:#a6e22e">LD_LIBRARY_PATH&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;${final.lib.makeLibraryPath ([ final.stdenv.cc.cc.lib final.libsecret final.e2fsprogs final.libnotify ])}&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>set&lt;span style="color:#f92672">-&lt;/span>default &lt;span style="color:#a6e22e">JDK_HOME&lt;/span> &lt;span style="color:#e6db74">&amp;#34;${final.jetbrains.jdk}&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>set&lt;span style="color:#f92672">-&lt;/span>default &lt;span style="color:#a6e22e">JAVA_HOME&lt;/span> &lt;span style="color:#e6db74">&amp;#34;${final.jetbrains.jdk}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">in&lt;/span> { jetbrains &lt;span style="color:#f92672">=&lt;/span> prev&lt;span style="color:#f92672">.&lt;/span>jetbrains &lt;span style="color:#f92672">//&lt;/span> builtins&lt;span style="color:#f92672">.&lt;/span>foldl&lt;span style="color:#e6db74">&amp;#39; (acc: toolName: acc // makeToolOverlay toolName) {} toolNames; })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">];&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Now all you have to do is add your favourite Jetbrains IDE to the &lt;code>toolNames&lt;/code> list and don&amp;rsquo;t forget to add it to your packages list as well, for example:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>environment&lt;span style="color:#f92672">.&lt;/span>systemPackages &lt;span style="color:#f92672">=&lt;/span> with pkgs; [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># other packages here...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jetbrains&lt;span style="color:#f92672">.&lt;/span>webstorm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jetbrains&lt;span style="color:#f92672">.&lt;/span>phpstorm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jetbrains&lt;span style="color:#f92672">.&lt;/span>jdk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>Note &lt;code>jetbrains.jdk&lt;/code> being there! Without it, none of this works, so do not forget to add it there!&lt;/p>
&lt;p>Now you need to &lt;code>sudo nixos-rebuild switch&lt;/code> and start the server. The naming of the utility depends on the IDE you want to use, in my case &lt;code>webstorm-remote-dev-server run &amp;lt;path to project&amp;gt;&lt;/code>.&lt;/p>
&lt;p>That is all, now you can just open up Jetbrains Gateway, go to the SSH tab and just connect to your instance by clicking on the project. It will be the one selected with the previous command!&lt;/p>
&lt;p>&lt;img src="/jb-nix-remote-server/projects.png" alt="Project list">&lt;/p></content></item></channel></rss>