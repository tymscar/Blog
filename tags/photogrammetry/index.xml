<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Photogrammetry on The Tymscar Blog</title><link>/tags/photogrammetry/</link><description>Recent content in Photogrammetry on The Tymscar Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 Sep 2023 23:20:00 +0100</lastBuildDate><atom:link href="/tags/photogrammetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Playing around with Gaussian Splat</title><link>/posts/gaussiansplat/</link><pubDate>Fri, 29 Sep 2023 23:20:00 +0100</pubDate><guid>/posts/gaussiansplat/</guid><description>&lt;p>Photogrammetry has held my interest for a very long time. After all, &lt;a href="https://www.tymscar.com/assets/images/visualisations/ezgif.com-gif-maker285292.gif">my profile picture&lt;/a>, almost everywhere, is a LiDAR scan of my head that I accomplished with the FaceID of an old iPhone about five years ago.&lt;/p>
&lt;p>Recently, I stumbled upon &lt;a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/3d_gaussian_splatting_high.pdf">a new paper about something called Gaussian Splatting&lt;/a>. This topic is fascinating because, instead of creating a 3D mesh, it more closely resembles a point cloud that is expanded and shaped in such a way that it looks highly realistic. One usecase that interests me in particular is bringing these in as VR backdrops.&lt;/p></description><content>&lt;p>Photogrammetry has held my interest for a very long time. After all, &lt;a href="https://www.tymscar.com/assets/images/visualisations/ezgif.com-gif-maker285292.gif">my profile picture&lt;/a>, almost everywhere, is a LiDAR scan of my head that I accomplished with the FaceID of an old iPhone about five years ago.&lt;/p>
&lt;p>Recently, I stumbled upon &lt;a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/3d_gaussian_splatting_high.pdf">a new paper about something called Gaussian Splatting&lt;/a>. This topic is fascinating because, instead of creating a 3D mesh, it more closely resembles a point cloud that is expanded and shaped in such a way that it looks highly realistic. One usecase that interests me in particular is bringing these in as VR backdrops.&lt;/p>
&lt;p>I initially followed the guide on their &lt;a href="https://github.com/graphdeco-inria/gaussian-splatting">GitHub page&lt;/a> on my &lt;a href="https://www.youtube.com/watch?v=6FI31QDtyy4">Windows virtual machine&lt;/a>, the one that controls my RTX 4080. Unfortunately, I encountered numerous issues with compiler dependencies in Visual Studio. They would never integrate into my path, and every time I added something to the app, another part would malfunction. I speculate this occurred because of the unique installation paths in my VM, where almost nothing is installed on the C drive.&lt;/p>
&lt;p>Subsequently, I moved the 4080 to my host device on Linux and followed the guide there, finding it surprisingly straightforward to operate.&lt;/p>
&lt;p>Eager to give it a solid chance, I ventured into the alley next to my house, took over 300 photos from various angles, and transferred them to my computer:&lt;/p>
&lt;img src="/gaussian-splat/photos.jpg" alt="Over 300 photos on my phone" style="display: block; margin: auto; width: 100%; max-width: 300px;">
&lt;p>This is what the shape of the point cloud looked like out of the box in Blender:&lt;/p>
&lt;p>&lt;img src="/gaussian-splat/blender-pointcloud.png" alt="Pointcloud in Blender">&lt;/p>
&lt;p>Now, I have a 4080, and the only downside compared to my old 3090ti is that it has 16 gigs of VRAM, instead of 24. This limitation had never posed a problem until today. The GitHub repo suggests needing 24 gigs of VRAM, but I decided to run it anyway. Out of the default 30,000 iterations, it completed 11,350.&lt;/p>
&lt;p>Fortunately, the default script configuration saves a model at 7,000 iterations and another one at 30,000. My process failing before the midpoint still left me with a lower-quality model to examine. Its reasonable appearance inspired me to proceed further, leading me to use this command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python train.py --iterations &lt;span style="color:#ae81ff">30000&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --save_iterations &lt;span style="color:#ae81ff">7000&lt;/span> &lt;span style="color:#ae81ff">11000&lt;/span> &lt;span style="color:#ae81ff">15000&lt;/span> &lt;span style="color:#ae81ff">19000&lt;/span> &lt;span style="color:#ae81ff">20000&lt;/span> &lt;span style="color:#ae81ff">21000&lt;/span> &lt;span style="color:#ae81ff">22000&lt;/span> &lt;span style="color:#ae81ff">23000&lt;/span> &lt;span style="color:#ae81ff">24000&lt;/span> &lt;span style="color:#ae81ff">25000&lt;/span> &lt;span style="color:#ae81ff">26000&lt;/span> &lt;span style="color:#ae81ff">27000&lt;/span> &lt;span style="color:#ae81ff">28000&lt;/span> &lt;span style="color:#ae81ff">29000&lt;/span> &lt;span style="color:#ae81ff">30000&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --densify_until_iter &lt;span style="color:#ae81ff">7500&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -s data/garden
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I halved the &lt;code>densify_until_iter&lt;/code> parameter, enabling further progress with the same amount of VRAM usage, and added many &amp;ldquo;checkpoints&amp;rdquo; to ensure I would still have a working model even in case of failure. Luckily, this allowed me to reach 30,000 iterations, using 15.9GB of VRAM.&lt;/p>
&lt;p>Here is a video of the end result. I believe it looks incredible, and it would appear even better with a central model instead of a corridor. I will certainly explore this further.&lt;/p>
&lt;video controls style="width: 100%; height: auto;">
&lt;source src="/gaussian-splat/video.mp4" type="video/mp4">
Your browser does not support the video tag.
&lt;/video></content></item></channel></rss>